package jetbrains.mps.samples.Shapes.actions;

/*Generated by MPS */

import jetbrains.mps.openapi.actions.descriptor.NodeFactory;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class myShapes {
  public static class NodeFactory_1891605514472063393 implements NodeFactory {
    public void setup(SNode newNode, SNode sampleNode, SNode enclosingNode, int index, SModel model) {
      {
        final SNode circle = sampleNode;
        if (SNodeOperations.isInstanceOf(circle, CONCEPTS.Circle$4Q)) {
          SPropertyOperations.assign(newNode, PROPS.upperLeftX$wAp9, SPropertyOperations.getInteger(circle, PROPS.x$wuSD));
          SPropertyOperations.assign(newNode, PROPS.upperLeftY$wARb, SPropertyOperations.getInteger(circle, PROPS.y$wvmF));
          SPropertyOperations.assign(newNode, PROPS.size$wB$e, (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(circle, LINKS.raduis$RAwj), CONCEPTS.IntegerConstant$Na) ? SPropertyOperations.getInteger(SNodeOperations.cast(SLinkOperations.getTarget(circle, LINKS.raduis$RAwj), CONCEPTS.IntegerConstant$Na), PROPS.value$jgCM) : 0));
        }
      }
      {
        final SNode square = sampleNode;
        if (SNodeOperations.isInstanceOf(square, CONCEPTS.Square$jR)) {
          SPropertyOperations.assign(newNode, PROPS.upperLeftX$wAp9, SPropertyOperations.getInteger(square, PROPS.upperLeftX$wAp9));
          SPropertyOperations.assign(newNode, PROPS.upperLeftY$wARb, SPropertyOperations.getInteger(square, PROPS.upperLeftY$wARb));
          SPropertyOperations.assign(newNode, PROPS.size$wB$e, SPropertyOperations.getInteger(square, PROPS.size$wB$e));
        }
      }
    }
  }
  public static class NodeFactory_1891605514472088161 implements NodeFactory {
    public void setup(SNode newNode, SNode sampleNode, SNode enclosingNode, int index, SModel model) {
      {
        final SNode shape = sampleNode;
        if (SNodeOperations.isInstanceOf(shape, CONCEPTS.Shape$LQ)) {
          SLinkOperations.setTarget(newNode, LINKS.colorRef$L$0p, SNodeOperations.copyNode(SLinkOperations.getTarget(shape, LINKS.colorRef$L$0p)));
        }
      }
    }
  }
  public static class NodeFactory_1891605514472116563 implements NodeFactory {
    public void setup(SNode newNode, SNode sampleNode, SNode enclosingNode, int index, SModel model) {
      {
        final SNode circle = sampleNode;
        if (SNodeOperations.isInstanceOf(circle, CONCEPTS.Circle$4Q)) {
          SPropertyOperations.assign(newNode, PROPS.x$wuSD, SPropertyOperations.getInteger(circle, PROPS.x$wuSD));
          SPropertyOperations.assign(newNode, PROPS.y$wvmF, SPropertyOperations.getInteger(circle, PROPS.y$wvmF));
          SLinkOperations.setTarget(newNode, LINKS.raduis$RAwj, SNodeOperations.copyNode(SLinkOperations.getTarget(circle, LINKS.raduis$RAwj)));
        }
      }
      {
        final SNode square = sampleNode;
        if (SNodeOperations.isInstanceOf(square, CONCEPTS.Square$jR)) {
          SPropertyOperations.assign(newNode, PROPS.x$wuSD, SPropertyOperations.getInteger(square, PROPS.upperLeftX$wAp9));
          SPropertyOperations.assign(newNode, PROPS.y$wvmF, SPropertyOperations.getInteger(square, PROPS.upperLeftY$wARb));
          SNode r = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, "jetbrains.mps.baseLanguage.structure.IntegerConstant"));
          SPropertyOperations.assign(r, PROPS.value$jgCM, SPropertyOperations.getInteger(square, PROPS.size$wB$e));
          SLinkOperations.setTarget(newNode, LINKS.raduis$RAwj, r);
        }
      }
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Circle$4Q = MetaAdapterFactory.getConcept(0x16bafbb4c6cd4cc5L, 0x83327c6de8729b3fL, 0x51dcaa29974fc198L, "jetbrains.mps.samples.Shapes.structure.Circle");
    /*package*/ static final SConcept IntegerConstant$Na = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, "jetbrains.mps.baseLanguage.structure.IntegerConstant");
    /*package*/ static final SConcept Square$jR = MetaAdapterFactory.getConcept(0x16bafbb4c6cd4cc5L, 0x83327c6de8729b3fL, 0x51dcaa29974fc1a2L, "jetbrains.mps.samples.Shapes.structure.Square");
    /*package*/ static final SConcept Shape$LQ = MetaAdapterFactory.getConcept(0x16bafbb4c6cd4cc5L, 0x83327c6de8729b3fL, 0x51dcaa29974fc161L, "jetbrains.mps.samples.Shapes.structure.Shape");
  }

  private static final class PROPS {
    /*package*/ static final SProperty upperLeftX$wAp9 = MetaAdapterFactory.getProperty(0x16bafbb4c6cd4cc5L, 0x83327c6de8729b3fL, 0x51dcaa29974fc1a2L, 0x51dcaa29974fc1a3L, "upperLeftX");
    /*package*/ static final SProperty x$wuSD = MetaAdapterFactory.getProperty(0x16bafbb4c6cd4cc5L, 0x83327c6de8729b3fL, 0x51dcaa29974fc198L, 0x51dcaa29974fc199L, "x");
    /*package*/ static final SProperty upperLeftY$wARb = MetaAdapterFactory.getProperty(0x16bafbb4c6cd4cc5L, 0x83327c6de8729b3fL, 0x51dcaa29974fc1a2L, 0x51dcaa29974fc1a5L, "upperLeftY");
    /*package*/ static final SProperty y$wvmF = MetaAdapterFactory.getProperty(0x16bafbb4c6cd4cc5L, 0x83327c6de8729b3fL, 0x51dcaa29974fc198L, 0x51dcaa29974fc19bL, "y");
    /*package*/ static final SProperty size$wB$e = MetaAdapterFactory.getProperty(0x16bafbb4c6cd4cc5L, 0x83327c6de8729b3fL, 0x51dcaa29974fc1a2L, 0x51dcaa29974fc1a8L, "size");
    /*package*/ static final SProperty value$jgCM = MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink raduis$RAwj = MetaAdapterFactory.getContainmentLink(0x16bafbb4c6cd4cc5L, 0x83327c6de8729b3fL, 0x51dcaa29974fc198L, 0x11ad3ddb3ead0dfbL, "raduis");
    /*package*/ static final SContainmentLink colorRef$L$0p = MetaAdapterFactory.getContainmentLink(0x16bafbb4c6cd4cc5L, 0x83327c6de8729b3fL, 0x51dcaa29974fc161L, 0x3a2b0182df24928cL, "colorRef");
  }
}
