package jetbrains.mps.samples.Shapes.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.samples.Shapes.behavior.Square__BehaviorDescriptor;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.errors.BaseQuickFixProvider;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;

public class check_Square_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_Square_NonTypesystemRule() {
  }
  public void applyRule(final SNode square, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (Sequence.fromIterable(SNodeOperations.ofConcept(SNodeOperations.getAllSiblings(square, false), CONCEPTS.Square$jR)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (boolean) Square__BehaviorDescriptor.isSame_id1D0lj5Tf7iY.invoke(it, square);
      }
    })) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(square, "Overlapping SQuare", "r:e44eb14d-c2bb-4d65-bb30-217515d5e47a(jetbrains.mps.samples.Shapes.typesystem)", "1891605514471441313", null, errorTarget);
        {
          BaseQuickFixProvider intentionProvider = new BaseQuickFixProvider("jetbrains.mps.samples.Shapes.typesystem.RemoveSquare_QuickFix", "1891605514471475903", false);
          intentionProvider.putArgument("colorName", SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(square, LINKS.colorRef$L$0p), LINKS.target$hpcG), PROPS.name$MnvL));
          _reporter_2309309498.addIntentionProvider(intentionProvider);
        }
        {
          BaseQuickFixProvider intentionProvider = new BaseQuickFixProvider("jetbrains.mps.samples.Shapes.typesystem.IncreaseSize_QuickFix", "1891605514471536513", false);
          intentionProvider.putArgument("color", SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(square, LINKS.colorRef$L$0p), LINKS.target$hpcG), PROPS.name$MnvL));
          intentionProvider.putArgument("newSize", 10);
          _reporter_2309309498.addIntentionProvider(intentionProvider);
        }
        {
          BaseQuickFixProvider intentionProvider = new BaseQuickFixProvider("jetbrains.mps.samples.Shapes.typesystem.IncreaseSize_QuickFix", "1891605514471544936", false);
          intentionProvider.putArgument("color", SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(square, LINKS.colorRef$L$0p), LINKS.target$hpcG), PROPS.name$MnvL));
          intentionProvider.putArgument("newSize", 20);
          _reporter_2309309498.addIntentionProvider(intentionProvider);
        }
        {
          BaseQuickFixProvider intentionProvider = new BaseQuickFixProvider("jetbrains.mps.samples.Shapes.typesystem.IncreaseSize_QuickFix", "1891605514471546383", false);
          intentionProvider.putArgument("color", SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(square, LINKS.colorRef$L$0p), LINKS.target$hpcG), PROPS.name$MnvL));
          intentionProvider.putArgument("newSize", 30);
          _reporter_2309309498.addIntentionProvider(intentionProvider);
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Square$jR;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Square$jR = MetaAdapterFactory.getConcept(0x16bafbb4c6cd4cc5L, 0x83327c6de8729b3fL, 0x51dcaa29974fc1a2L, "jetbrains.mps.samples.Shapes.structure.Square");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink colorRef$L$0p = MetaAdapterFactory.getContainmentLink(0x16bafbb4c6cd4cc5L, 0x83327c6de8729b3fL, 0x51dcaa29974fc161L, 0x3a2b0182df24928cL, "colorRef");
    /*package*/ static final SReferenceLink target$hpcG = MetaAdapterFactory.getReferenceLink(0x16bafbb4c6cd4cc5L, 0x83327c6de8729b3fL, 0x3a2b0182df2201afL, 0x3a2b0182df22029aL, "target");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
